#==========================================================================================
                    ODE SOLVER FOR NEUTRINO OSCILLATIONS IN A SUPERNOVA 

DESCRIPTION: This script solves the neutrino oscillation equations in a supernova using the
Sundials.jl package. The vacuum, matter and collective terms are all considered. The script
uses the GL method as the integral solver. CVODE_BDF is used as the ODE solver.
AUTHOR: Tudor Ciobanu
==========================================================================================#

#==========================================================================================
                        IMPORTING PACKAGES AND LIBRARIES
==========================================================================================#
using DifferentialEquations, SpecialFunctions, FastGaussQuadrature, LinearAlgebra, Integrals, Sundials, JLD2, Printf, LaTeXStrings, BenchmarkTools, Plots, Statistics, Interpolations, CSV, DataFrames
using Logging: global_logger
using TerminalLoggers: TerminalLogger
global_logger(TerminalLogger())

#==========================================================================================
                        SU(3) LIE ALGEBRA STRUCTURE CONSTANTS
                    
DESCRIPTION: Sets the structure constants for the SU(3) Lie algebra. The structure
constants are used to define the cross product of the Lie algebra elements. The
structure constants are defined for the 8 generators of the SU(3) Lie algebra. The
structure constants are totally antisymmetric and are defined as follows:
f‚ÇÅ‚ÇÇ‚ÇÉ = 2, f‚ÇÅ‚ÇÑ‚Çá = 1, f‚ÇÅ‚ÇÜ‚ÇÖ = 1, f‚ÇÇ‚ÇÑ‚ÇÜ = 1, f‚ÇÇ‚ÇÖ‚Çá = 1, f‚ÇÉ‚ÇÑ‚ÇÖ = 1, f‚ÇÉ‚Çá‚ÇÜ = 1, f‚ÇÜ‚Çá‚Çà = ‚àö3, f‚ÇÑ‚ÇÖ‚Çà = ‚àö3
==========================================================================================#

function set_structure_constants(ùêü, indices, value)
    for (i, j, k) in indices
        ùêü[i, j, k] = value
        ùêü[j, k, i] = value
        ùêü[k, i, j] = value
        ùêü[j, i, k] = -value
        ùêü[i, k, j] = -value
        ùêü[k, j, i] = -value
    end
end

#==========================================================================================
                        SU(3) GENERALIZED CROSS PRODUCT

DESCRIPTION: Defines the generalized cross product for the SU(3) Lie algebra. The cross
product is defined for the 8 generators of the SU(3) Lie algebra. The cross product is
defined as follows:
C = ‚àëf·µ¢‚±º‚Çñ A·µ¢B‚±ºeÃÇ‚Çñ
where A, B and C are the elements of the SU(3) Lie algebra and f·µ¢‚±º‚Çñ are the structure
constants of the SU(3) Lie algebra.
==========================================================================================#

function cross_prod(A::Array{Float64, 1}, B::Array{Float64, 1}, ùêü::Array{Float64, 3})
    C = zeros(Float64, 8)
    @inbounds @simd for k in 1:8
        for i in 1:8
            for j in 1:8
                C[k] += 1/2*ùêü[i, j, k]*A[i]*B[j]
            end
        end
    end
    return C
end

#==========================================================================================
                                    œâ FUNCTION

DESCRIPTION: Defines the neutrino oscillation frequency as a function of the neutrino
energy. The neutrino oscillation frequency is defined as follows:
œâ = |Œîm¬≤‚ÇÅ‚ÇÉ|/(2E)
where Œîm¬≤‚ÇÅ‚ÇÉ is the mass squared difference between the first and third neutrino mass
eigenstates and E is the neutrino energy.
==========================================================================================#

function omega(E::Float64, Œîm¬≤‚ÇÅ‚ÇÉ::Float64)
    return abs(Œîm¬≤‚ÇÅ‚ÇÉ)/(2*E)
end

#==========================================================================================
                                COLLECTIVE POTENTIAL

DESCRIPTION: Defines the collective potential as a function of the radial coordinate. The
collective potential is defined as follows:
Œº = 0.45e5*(4*r‚ÇÄ^2)/(3*r^2)*(1 - sqrt(1 - r‚ÇÄ^2/r^2) - r‚ÇÄ^2/(4*r^2)) [km‚Åª¬π]
where r‚ÇÄ links to the radius of the neutrino sphere and r is the radial coordinate.
==========================================================================================#

function Œº(r::Float64, r‚ÇÄ::Int)
    return 0.45e5*(4*r‚ÇÄ^2)/(3*r^2)*(1 - sqrt(1 - r‚ÇÄ^2/r^2) - r‚ÇÄ^2/(4*r^2))
end

#==========================================================================================
                                MATTER POTENTIAL

DESCRIPTION: Defines the matter potential as a function of the radial coordinate. The
matter potential is defined as follows:
Œª = 1.84e6/(r^(2.4)) [km‚Åª¬π]
where r is the radial coordinate.
==========================================================================================#

function x‚Çõ(t)
    x‚Çõ‚Å∞ = -4.6e3 # km
    v‚Çõ = 11.3e3 # km/s
    a‚Çõ = 0.2e3 # km/s¬≤
    x‚Çõ = x‚Çõ‚Å∞ + v‚Çõ*t + 1/2*a‚Çõ*t^2
    return x‚Çõ
end

function f(x, t)
    fln = (0.28 - 0.69*log(x‚Çõ(t)))*(asin(1 - x/x‚Çõ(t)))^(1.1)
    f = exp(fln)
    return f
end

function œÅ(x, t)
    œÅ‚ÇÄ = 1e14*(x)^(-2.4) # g/cm¬≥
    Œæ = 10
    œÅ = 0
    if t <= 1
        œÅ = œÅ‚ÇÄ
    elseif t > 1
        if x <= x‚Çõ(t)
            œÅ = œÅ‚ÇÄ*Œæ*f(x, t)
        elseif x > x‚Çõ(t)
            œÅ = œÅ‚ÇÄ
        end
    end
    return œÅ
end

function Œª(r::Float64, t::Float64)
    km‚Åª¬π_to_eV = 1.97e-10 # eV
    Y‚Çë = 1/2
    Œª = 7.6e-8*Y‚Çë*œÅ(r, t)*1e-6/km‚Åª¬π_to_eV
    #return 1.84e6/(r^(2.4))
    return Œª
end

#==========================================================================================
                                SCALING FACTOR
==========================================================================================#

function N(œµ_ŒΩ::Float64)
    return (1 + œµ_ŒΩ)^(1 + œµ_ŒΩ)*1/gamma(1 + œµ_ŒΩ)
end

#==========================================================================================
                                FLUX AVERAGES
==========================================================================================#

function Œ¶_ŒΩ(species::String, EÃÑ::Dict{String, Float64}, L_ŒΩ::Float64)
    return L_ŒΩ/EÃÑ[species]
end

#==========================================================================================
                             ENERGY DISTRIBUTION
==========================================================================================#
function f_e(E::Float64, EÃÑ_ŒΩ::Float64, œµ_ŒΩ::Float64, L_ŒΩ::Float64)
    f = L_ŒΩ*N(œµ_ŒΩ)/(EÃÑ_ŒΩ^2)*(E/EÃÑ_ŒΩ)^œµ_ŒΩ*exp(-E/EÃÑ_ŒΩ*(œµ_ŒΩ + 1))
    return f
end


#==========================================================================================
                                œâ DISTRIBUTION
==========================================================================================#

function f_o(œâ::Float64, EÃÑ_ŒΩ::Float64, Œ¶::Float64, œµ_ŒΩ::Float64, L_ŒΩ::Float64, Œîm¬≤‚ÇÅ‚ÇÉ::Float64)
    E = abs(Œîm¬≤‚ÇÅ‚ÇÉ)/(2*œâ)
    f = E/(Œ¶*œâ)*f_e(abs(E), EÃÑ_ŒΩ, œµ_ŒΩ, L_ŒΩ)
    return f
end

#==========================================================================================
                        INTEGRATION BOUNDS TRANSFORMATION
==========================================================================================#

function transform_gauss_xw(x::Array{Float64,1}, w::Array{Float64,1}, a::Float64, b::Float64)
    x1 = a .+ (b-a)/2 * (x .+ 1)
    w1 = (b-a)/2 * w
    return (x=x1, w=w1)
end

#==========================================================================================
                            GAUSS-LEGENDRE INTEGRATION
==========================================================================================#

function GL_integral(f::Array{Float64,1}, a::Float64, b::Float64, order::Int)
    x, w = gausslegendre(order)
    T = transform_gauss_xw(x, w, a, b)
    return dot(T.w, f)
end

#==========================================================================================
                            SIMPSON'S RULE FOR INTEGRATION
==========================================================================================#

function simps(y::Array{Float64, 1}, x::Array{Float64, 1})
    n = length(y)-1
    n % 2 == 0 || error("`y` length (number of intervals) must be odd")
    length(x)-1 == n || error("`x` and `y` length must be equal")
    h = (x[end]-x[1])/n
    s = sum(y[1:2:n] + 4*y[2:2:n] + y[3:2:n+1])
    return h/3 * s
end

#==========================================================================================
                            SYSTEM INITIALIZATION
==========================================================================================#

function initialize_system_single(E·µ¢::Float64, E‚Çñ::Float64, Ebins::Int, EÃÑ::Dict{String, Float64}, œµ_ŒΩ::Array{Float64, 1}, Œîm¬≤‚ÇÅ‚ÇÉ::Float64, L_ŒΩ::Array{Float64, 1})
    ùêè = zeros(Float64, 16, Ebins)

    #= Get the Gauss-Legendre quadrature points and weights based on the energy bins
    and transform them to the œâ range [œâ‚Çñ, œâ·µ¢] where œâ‚Çñ = œâ(E‚Çñ) and œâ·µ¢ = œâ(E·µ¢).    =#
    x, w = gausslegendre(Ebins)
    T = transform_gauss_xw(x, w, omega(E‚Çñ, Œîm¬≤‚ÇÅ‚ÇÉ), omega(E·µ¢, Œîm¬≤‚ÇÅ‚ÇÉ)) 
    œâ = T.x

    #= Calculate the flux averages for the neutrino species and set up the distribution
    functions.                                                                      =#
    L_ŒΩ‚Çë, L_ŒΩÃÑ‚Çë, L_ŒΩ‚Çì = L_ŒΩ
    œµ_ŒΩ‚Çë, œµ_ŒΩÃÑ‚Çë, œµ_ŒΩ‚Çì = œµ_ŒΩ
    Œ¶ = Œ¶_ŒΩ("nu_e", EÃÑ, L_ŒΩ‚Çë) .+ Œ¶_ŒΩ("nubar_e", EÃÑ, L_ŒΩÃÑ‚Çë) .+ 2*Œ¶_ŒΩ("nu_x", EÃÑ, L_ŒΩ‚Çì) .+ 2*Œ¶_ŒΩ("nu_y", EÃÑ, L_ŒΩ‚Çì)
    f_œâ = f_o.(œâ, EÃÑ["nu_e"], Œ¶, œµ_ŒΩ‚Çë, L_ŒΩ‚Çë, Œîm¬≤‚ÇÅ‚ÇÉ) .+ f_o.(œâ, EÃÑ["nu_x"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ) .+ f_o.(œâ, EÃÑ["nu_y"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ)
    f_œâÃÑ = f_o.(-œâ, EÃÑ["nubar_e"], Œ¶, œµ_ŒΩÃÑ‚Çë, L_ŒΩÃÑ‚Çë, Œîm¬≤‚ÇÅ‚ÇÉ) .+ f_o.(-œâ, EÃÑ["nubar_x"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ) .+ f_o.(-œâ, EÃÑ["nubar_y"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ)

    #= Set up the initial polarization vectors. =#
    for i in 1:Ebins
        ùêè[3,i] = (f_o.(œâ[i],  EÃÑ["nu_e"], Œ¶, œµ_ŒΩ‚Çë, L_ŒΩ‚Çë, Œîm¬≤‚ÇÅ‚ÇÉ) - f_o.(œâ[i], EÃÑ["nu_x"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ))/f_œâ[i]
        ùêè[8,i] = (f_o.(œâ[i], EÃÑ["nu_e"], Œ¶, œµ_ŒΩ‚Çë, L_ŒΩ‚Çë, Œîm¬≤‚ÇÅ‚ÇÉ) + f_o.(œâ[i], EÃÑ["nu_x"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ) - 2*f_o.(œâ[i], EÃÑ["nu_y"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ))/(sqrt(3)*f_œâ[i])
        ùêè[11,i] = (f_o.(-œâ[i], EÃÑ["nubar_e"], Œ¶, œµ_ŒΩÃÑ‚Çë, L_ŒΩÃÑ‚Çë, Œîm¬≤‚ÇÅ‚ÇÉ) - f_o.(-œâ[i], EÃÑ["nubar_x"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ))/f_œâÃÑ[i]
        ùêè[16,i] = (f_o.(-œâ[i], EÃÑ["nubar_e"], Œ¶, œµ_ŒΩÃÑ‚Çë, L_ŒΩÃÑ‚Çë, Œîm¬≤‚ÇÅ‚ÇÉ) + f_o.(-œâ[i], EÃÑ["nubar_x"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ) - 2*f_o.(-œâ[i], EÃÑ["nubar_y"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ))/(sqrt(3)*f_œâÃÑ[i])
    end
    return œâ, ùêè, f_œâ, f_œâÃÑ
end

#==========================================================================================
                                    ùêÉ MATRIX
==========================================================================================#

function D(ùêè::Array{Float64,2}, œâ::Array{Float64,1}, f_œâ::Array{Float64,1}, f_œâÃÑ::Array{Float64,1}, order::Int)
    D = zeros(Float64, 8)
    œâ·µ¢ = œâ[1]
    œâ‚Çñ = œâ[end]
    @inbounds for i in 1:8
        D[i] = GL_integral(f_œâ.*ùêè[i, :], œâ·µ¢, œâ‚Çñ, order) - GL_integral(f_œâÃÑ.*ùêè[i+8, :], œâ·µ¢, œâ‚Çñ, order)
    end
    return D
end

#==========================================================================================
                                    ODE FUNCTION
==========================================================================================#

function dPdr(du::Array{Float64,2}, u::Array{Float64,2}, p, t::Float64)
    @printf("r = %f\n", t)

    km‚Åª¬π_to_eV = 1.97e-10 # eV

    œâ = p[1]
    f_œâ = p[2]
    f_œâÃÑ = p[3]
    ùêÅ = p[4]
    ùêã = p[5]
    r‚ÇÄ = p[6]
    ùêü = p[7]
    
    Ebins = length(œâ)

    ùêÉ = D(u, œâ, f_œâ, f_œâÃÑ, Ebins)
    Œª_t = Œª(t, 4.0)
    Œº_t = Œº(t, r‚ÇÄ)
    @inbounds for i in 1:Ebins
        œâ_i = œâ[i]/km‚Åª¬π_to_eV
        du[1:8, i] = cross_prod((œâ_i.*ùêÅ .+ Œª_t.*ùêã .+ Œº_t.*ùêÉ), u[1:8, i], ùêü)
        du[9:16, i] = cross_prod((-œâ_i.*ùêÅ .+ Œª_t*ùêã .+ Œº_t.*ùêÉ), u[9:16, i], ùêü)
    end
end

#==========================================================================================
                                        SOLVER
==========================================================================================#
function evolve(E·µ¢, E‚Çñ, Ebins, umin, umax)
    #= Set up the physical constants and conversion factors. =#
    J_to_eV = 6.25e18 # eV
    s‚Åª¬π_to_eV = 6.58e-16 # eV

    #= Set up the SU(3) Lie algebra structure constants. =#
    ùêü = zeros(Float64, 8, 8, 8)
    set_structure_constants(ùêü, [(1, 2, 3)], 2)
    set_structure_constants(ùêü, [(1, 4, 7), (1, 6, 5), (2, 4, 6), (2, 5, 7), (3, 4, 5), (3, 7, 6)], 1)
    set_structure_constants(ùêü, [(6, 7, 8), (4, 5, 8)], sqrt(3))

    #= Set up the model parameters. =#
    Œîm¬≤‚ÇÅ‚ÇÉ = -2.458e-3 # eV¬≤, >0 for normal hierarch, <0 for inverted hierarchy
    œµ = -0.031 # unitless, >0 for normal hierarchy, <0 for inverted hierarchy
    Œ∏‚ÇÅ‚ÇÇ = 0.58 # radians
    Œ∏‚ÇÅ‚ÇÉ = 0.15 # radians
    h = sign(Œîm¬≤‚ÇÅ‚ÇÉ)
    Œ¥ = 0
    EÃÑ_ŒΩ‚Çë = 10e6 # eV
    EÃÑ_ŒΩÃÑ‚Çë = 15e6 # eV
    EÃÑ_ŒΩ‚Çì = 20e6 # eV
    EÃÑ_ŒΩ·µß= 20e6 # eV
    œµ_ŒΩ = [3.0, 3.0, 3.0] # unitless
    L_ŒΩ = [1.5e44, 1.5e44, 1.5e44]*J_to_eV*s‚Åª¬π_to_eV # eV^2
    r‚ÇÄ = 10 # km

    ùêÅ = [œµ*sin(2*Œ∏‚ÇÅ‚ÇÇ)*cos(Œ∏‚ÇÅ‚ÇÉ),
      0,
      sin(Œ∏‚ÇÅ‚ÇÉ)^2 - œµ*(cos(Œ∏‚ÇÅ‚ÇÇ)^2 - sin(Œ∏‚ÇÅ‚ÇÇ)^2*cos(Œ∏‚ÇÅ‚ÇÉ)^2),
      (1 - œµ*sin(Œ∏‚ÇÅ‚ÇÇ)^2)*sin(2*Œ∏‚ÇÅ‚ÇÉ)*cos(Œ¥),
      (1 - œµ*sin(Œ∏‚ÇÅ‚ÇÇ)^2)*sin(2*Œ∏‚ÇÅ‚ÇÉ)*sin(Œ¥),
      -œµ*sin(2*Œ∏‚ÇÅ‚ÇÇ)*sin(Œ∏‚ÇÅ‚ÇÉ)*cos(Œ¥),
      -œµ*sin(2*Œ∏‚ÇÅ‚ÇÇ)*sin(Œ∏‚ÇÅ‚ÇÉ)*sin(Œ¥),
      œµ/(2*sqrt(3))*(3*cos(Œ∏‚ÇÅ‚ÇÉ)^2 - 1 + 3*sin(Œ∏‚ÇÅ‚ÇÉ)^2*(2*cos(Œ∏‚ÇÅ‚ÇÇ)^2 - 1)) + 1/sqrt(3)*(1 - 3*cos(Œ∏‚ÇÅ‚ÇÉ)^2)]
    ùêÅ = ùêÅ./h

    ùêã = [0, 0, 1, 0, 0, 0, 0, 1/sqrt(3)]

    # Energy averages
    EÃÑ = Dict([("nu_e", EÃÑ_ŒΩ‚Çë), ("nubar_e", EÃÑ_ŒΩÃÑ‚Çë), ("nu_x", EÃÑ_ŒΩ‚Çì), ("nubar_x", EÃÑ_ŒΩ‚Çì), ("nu_y", EÃÑ_ŒΩ·µß), ("nubar_y", EÃÑ_ŒΩ·µß)])
    œâ, ùêè‚ÇÄ, f_œâ, f_œâÃÑ = initialize_system_single(E·µ¢, E‚Çñ, Ebins, EÃÑ, œµ_ŒΩ, Œîm¬≤‚ÇÅ‚ÇÉ, L_ŒΩ)
    @save "omega.jld2" œâ
    #indices = [1, 6, 11, 16, 20, 25, 28, 32, 37, 43, 47]
    #prob = ODEProblem(dPdr, ùêè‚ÇÄ, (umin, umax), [œâ, f_œâ, f_œâÃÑ, ùêÅ, ùêã, r‚ÇÄ, ùêü])
    println("Solving the ODE...")
    # @time begin
    #     sol = solve(prob, CVODE_BDF(linear_solver =:LapackDense), maxiters = Int(1.0e18), abstol = 1e-10, save_everystep = false, saveat = 0.1)
    # end
    @load "sol_4.0_ih.jld2" sol
    ts = sol.t
    œÅ_init = 1/3 .+ 1/2 .*(sol[3, 6, :] .+ 1/sqrt(3) .*sol[8, 6, :])
    œÅ_final = 1/3 .+ 1/2 .*(sol[3, 99, :] .+ 1/sqrt(3) .*sol[8, 99, :])
    ùêè‚ÇÄ = sol[:,:,end]
    prob = ODEProblem(dPdr, ùêè‚ÇÄ, (umin, umax), [œâ, f_œâ, f_œâÃÑ, ùêÅ, ùêã, r‚ÇÄ, ùêü])
    @time begin
        soln =  solve(prob, maxiters = Int(1.0e18), abstol = 1e-10, save_everystep = false, saveat = 1)
    end
    œÅ‚Çë‚Çë = 1/3 .+ 1/2 .*(soln[3, :, :] .+ 1/sqrt(3) .*soln[8, :, :])
    p = plot(soln.t, œÅ‚Çë‚Çë[6, :], xaxis=:log, label = "1")
    plot!(soln.t, œÅ‚Çë‚Çë[99, :], label = "2")
    plot!(ts, œÅ_init, label = "3")
    plot!(ts, œÅ_final, label = "4")
    ylims!(0, 1)
    xlims!(9000, 50000)
    display(p)
    readline()
    @save "sol_4.0_ih_add.jld2" soln
end

#==========================================================================================
                                    PLOTTING
==========================================================================================#

function plot_flavor_evolution(sol, indices, name, xmax)
    rho_ee = zeros(Float64, length(sol.t), length(indices))
    rho_bar_ee = zeros(Float64, length(sol.t), length(indices))
    rho_xx = zeros(Float64, length(sol.t), length(indices))
    rho_bar_xx = zeros(Float64, length(sol.t), length(indices))
    rho_yy = zeros(Float64, length(sol.t), length(indices))
    rho_bar_yy = zeros(Float64, length(sol.t), length(indices))

    for i in 1:length(indices)
        rho_ee[:, i] = 1/3 .+ 1/2 .*(sol[3, indices[i], :] .+ 1/sqrt(3) .*sol[8, indices[i], :])
        rho_xx[:, i] = 1/3 .+ 1/2 .*(-sol[3, indices[i], :] .+ 1/sqrt(3) .*sol[8, indices[i], :])
        rho_bar_xx[:, i] = 1/3 .+ 1/2 .*(-sol[11, indices[i], :] .+ 1/sqrt(3) .*sol[16, indices[i], :])
        rho_yy[:, i] = 1/3 .+ 1/2 .*(-2/sqrt(3)*sol[8, indices[i], :])
        rho_bar_yy[:, i] = 1/3 .+ 1/2 .*(-2/sqrt(3)*sol[16, indices[i], :])
        rho_bar_ee[:, i] = 1/3 .+ 1/2 .*(sol[11, indices[i], :] .+ 1/sqrt(3) .*sol[16, indices[i], :])
    end

    println("Plotting...")
    l = @layout [a b; c d; e f]
    lc = reverse([:pink, :darkblue, :lightblue, :green, :orange, :red, :lightgreen, :darkgreen, :blue, :magenta, :red])
    p = plot(sol.t, rho_ee[:, 1], seriestype=:path, linestyle=:solid, lc=lc[1], framestyle = :box, xaxis=:log, xticks = [10, 100, 1000], layout = l, grid=false, legend = false, dpi = 300)
    for i in 1:length(indices)
        plot!(p[1], sol.t, rho_ee[:, i], seriestype=:path,linestyle=:solid, xaxis=:log, lc=lc[i], xticks = [10, 100, 1000, 10000], framestyle = :box, legend = false)
        plot!(p[2], sol.t, rho_bar_ee[:, i], seriestype=:path,linestyle=:solid, lc=lc[i], xticks = [10, 100, 1000, 10000], xaxis=:log, framestyle = :box, legend = false)
        plot!(p[3], sol.t, rho_xx[:, i], seriestype=:path,linestyle=:solid, lc=lc[i], xticks = [10, 100, 1000, 10000], xaxis=:log, framestyle = :box, legend = false)
        plot!(p[4], sol.t, rho_bar_xx[:, i], seriestype=:path,linestyle=:solid, lc=lc[i], xticks = [10, 100, 1000, 10000], xaxis=:log, framestyle = :box, legend = false)
        plot!(p[5], sol.t, rho_yy[:, i], seriestype=:path,linestyle=:solid, lc=lc[i], xticks = [10, 100, 1000, 10000], xaxis=:log, framestyle = :box, legend = false)
        plot!(p[6], sol.t, rho_bar_yy[:, i], seriestype=:path,linestyle=:solid, lc=lc[i], xticks = [10, 100, 1000, 10000], xaxis=:log, framestyle = :box, legend = false)
    end
    ylims!(0, 1)
    xlims!(10, xmax)
    xlabel!(p[5], "\$r \\, \\textrm{(km)}\$")
    xlabel!(p[6], "\$r \\, \\textrm{(km)}\$")
    ylabel!(p[1], L"\rho_{ee}")
    ylabel!(p[3], L"\rho_{xx}")
    ylabel!(p[5], L"\rho_{yy}")
    display(p)
    savefig(name*".png")
    readline()
end

function plot_final_spectra(sol, E·µ¢, E‚Çñ, Ebins, name)
    rho_ee = mean(1/3 .+ 1/2 .*(sol[3, :, end-100:end] .+ 1/sqrt(3) .*sol[8, :, end-100:end]), dims = 2)
    rho_xx = mean(1/3 .+ 1/2 .*(-sol[3, :, end-100:end] .+ 1/sqrt(3) .*sol[8, :, end-100:end]), dims = 2)
    rho_yy = mean(1/3 .+ 1/2 .*(.- 2/sqrt(3) .*sol[8, :, end-100:end]), dims = 2)
    rho_bar_ee = mean(1/3 .+ 1/2 .*(sol[11, :, end-100:end] .+ 1/sqrt(3) .*sol[16, :, end-100:end]), dims = 2)
    rho_bar_xx = mean(1/3 .+ 1/2 .*(-sol[11, :, end-100:end] .+ 1/sqrt(3) .*sol[16, :, end-100:end]), dims = 2)
    rho_bar_yy = mean(1/3 .+ 1/2 .*(.- 2/sqrt(3) .*sol[16, :, end-100:end]), dims = 2)

    Œîm¬≤‚ÇÅ‚ÇÉ = 2.458e-3 # eV¬≤
    x, w = gausslegendre(Ebins)
    T = transform_gauss_xw(x, w, omega(E‚Çñ, Œîm¬≤‚ÇÅ‚ÇÉ), omega(E·µ¢, Œîm¬≤‚ÇÅ‚ÇÉ)) 
    œâ = T.x
    E = abs(Œîm¬≤‚ÇÅ‚ÇÉ)./(2*œâ)
    EÃÑ_ŒΩ‚Çë = 10e6 # eV
    EÃÑ_ŒΩÃÑ‚Çë = 15e6 # eV
    EÃÑ_ŒΩ‚Çì = 20e6 # eV
    EÃÑ_ŒΩ·µß= 20e6 # eV
    J_to_eV = 6.25e18 # eV
    s‚Åª¬π_to_eV = 6.58e-16 # eV
    
    œµ_ŒΩ‚Çë, œµ_ŒΩÃÑ‚Çë, œµ_ŒΩ‚Çì = [3.0, 3.0, 3.0]
    L_ŒΩ‚Çë, L_ŒΩÃÑ‚Çë, L_ŒΩ‚Çì = [1.5e44, 1.5e44, 1.5e44]*J_to_eV*s‚Åª¬π_to_eV

    EÃÑ = Dict([("nu_e", EÃÑ_ŒΩ‚Çë), ("nubar_e", EÃÑ_ŒΩÃÑ‚Çë), ("nu_x", EÃÑ_ŒΩ‚Çì), ("nubar_x", EÃÑ_ŒΩ‚Çì), ("nu_y", EÃÑ_ŒΩ·µß), ("nubar_y", EÃÑ_ŒΩ·µß)])
    Œ¶ = Œ¶_ŒΩ("nu_e", EÃÑ, L_ŒΩ‚Çë) .+ Œ¶_ŒΩ("nubar_e", EÃÑ, L_ŒΩÃÑ‚Çë) .+ 2*Œ¶_ŒΩ("nu_x", EÃÑ, L_ŒΩ‚Çì) .+ 2*Œ¶_ŒΩ("nu_y", EÃÑ, L_ŒΩ‚Çì)
    f_œâ = f_o.(œâ, EÃÑ["nu_e"], Œ¶, œµ_ŒΩ‚Çë, L_ŒΩ‚Çë, Œîm¬≤‚ÇÅ‚ÇÉ) .+ f_o.(œâ, EÃÑ["nu_x"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ) .+ f_o.(œâ, EÃÑ["nu_y"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ)
    f_œâÃÑ = f_o.(-œâ, EÃÑ["nubar_e"], Œ¶, œµ_ŒΩÃÑ‚Çë, L_ŒΩÃÑ‚Çë, Œîm¬≤‚ÇÅ‚ÇÉ) .+ f_o.(-œâ, EÃÑ["nubar_x"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ) .+ f_o.(-œâ, EÃÑ["nubar_y"], Œ¶, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì, Œîm¬≤‚ÇÅ‚ÇÉ)

    f_obs_e = rho_ee.*f_œâ.*œâ.^2
    f_obs_x = rho_xx.*f_œâ.*œâ.^2
    f_obs_y = rho_yy.*f_œâ.*œâ.^2
    f_obs_bar_e = rho_bar_ee.*f_œâÃÑ.*œâ.^2
    f_obs_bar_x = rho_bar_xx.*f_œâÃÑ.*œâ.^2
    f_obs_bar_y = rho_bar_yy.*f_œâÃÑ.*œâ.^2

    #@save "final_spectra.jld2" f_obs_e f_obs_x f_obs_y f_obs_bar_e f_obs_bar_x f_obs_bar_y
    #@save "final_spectra_E.jld2" E

    l = @layout [a b]
    p = plot(E*1e-6, 0.0506666667*f_e.(E, EÃÑ_ŒΩ‚Çë, œµ_ŒΩ‚Çë, L_ŒΩ‚Çë)*abs(Œîm¬≤‚ÇÅ‚ÇÉ)/(2*Œ¶)*1e11, layout = l, seriestype=:path, linestyle=:solid, lc=:red, label = "\$ \\nu_{e, i} \$", framestyle = :box, legend = true)
    plot!(p[1], E*1e-6, 0.0506666667*f_e.(E, EÃÑ_ŒΩ‚Çì, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì)*abs(Œîm¬≤‚ÇÅ‚ÇÉ)/(2*Œ¶)*1e11, seriestype=:path, linestyle=:solid, lc=:blue, label = "\$ \\nu_{(x,y), i} \$", framestyle = :box, grid=false, dpi = 300)
    plot!(p[1], E*1e-6, 0.0506666667*f_obs_e*1e11, seriestype=:path, linestyle=:dash, lc=:red, label = "\$ \\nu_{e} \$", framestyle = :box)
    plot!(p[1], E*1e-6, 0.0506666667*f_obs_x*1e11, seriestype=:path, linestyle=:dash, lc=:green, label = "\$ \\nu_{x} \$", framestyle = :box, grid=false, dpi = 300)
    plot!(p[1], E*1e-6, 0.0506666667*f_obs_y*1e11, seriestype=:path, linestyle=:dash, lc=:blue, label = "\$ \\nu_{y} \$", framestyle = :box)
    plot!(p[2], E*1e-6, 0.0506666667*f_e.(E, EÃÑ_ŒΩÃÑ‚Çë, œµ_ŒΩÃÑ‚Çë, L_ŒΩÃÑ‚Çë)*abs(Œîm¬≤‚ÇÅ‚ÇÉ)/(2*Œ¶)*1e11, seriestype=:path, linestyle=:solid, lc=:red, label = "\$ \\bar{\\nu}_{e, i} \$", framestyle = :box)
    plot!(p[2], E*1e-6, 0.0506666667*f_e.(E, EÃÑ_ŒΩ‚Çì, œµ_ŒΩ‚Çì, L_ŒΩ‚Çì)*abs(Œîm¬≤‚ÇÅ‚ÇÉ)/(2*Œ¶)*1e11, seriestype=:path, linestyle=:solid, lc=:blue, label = "\$ \\bar{\\nu}_{(x,y), i} \$", framestyle = :box, grid=false, dpi = 300)
    plot!(p[2], E*1e-6, 0.0506666667*f_obs_bar_e*1e11, seriestype=:path, linestyle=:dash, lc=:red, label = "\$ \\bar{\\nu}_{e} \$", framestyle = :box)
    plot!(p[2], E*1e-6, 0.0506666667*f_obs_bar_x*1e11, seriestype=:path, linestyle=:dash, lc=:green, label = "\$ \\bar{\\nu}_{x} \$", framestyle = :box, grid=false, dpi = 300)
    plot!(p[2], E*1e-6, 0.0506666667*f_obs_bar_y*1e11, seriestype=:path, linestyle=:dash, lc=:blue, label = "\$ \\bar{\\nu}_{y} \$", framestyle = :box)
    xlabel!(p[1], "\$E \\, \\textrm{(MeV)}\$")
    xlabel!(p[2], "\$E \\, \\textrm{(MeV)}\$")
    ylabel!(p[1], "Flux (a.u.)")
    ylabel!(p[2], "Flux (a.u.)")
    xlims!(0, 51)
    ylims!(p[1], 0, 0.16)
    ylims!(p[2], 0, 0.08)
    display(p)
    savefig(name*".png")
    readline()
end


function plot_density_profile(name, xmax, t, E·µ¢, E‚Çñ)
    max = 101
    r = 10 .^ range(1, stop=6, length=max)
    km‚Åª¬π_to_eV = 1.97e-10 #eV
    r‚ÇÄ = 10
    Œº_r = Œº.(r, r‚ÇÄ)
    Œª_r = Œª.(r, t)
    Œîm¬≤‚ÇÅ‚ÇÉ = 2.5e-3
    œµ = 1/30
    Œîm¬≤‚ÇÅ‚ÇÇ = œµ*Œîm¬≤‚ÇÅ‚ÇÉ
    œâ‚Çñ_13 = abs(Œîm¬≤‚ÇÅ‚ÇÉ)/(2*E·µ¢)/km‚Åª¬π_to_eV
    œâ·µ¢_13 = abs(Œîm¬≤‚ÇÅ‚ÇÉ)/(2*E‚Çñ)/km‚Åª¬π_to_eV
    œâ‚Çñ_12 = abs(Œîm¬≤‚ÇÅ‚ÇÇ)/(2*E·µ¢)/km‚Åª¬π_to_eV
    œâ·µ¢_12 = abs(Œîm¬≤‚ÇÅ‚ÇÇ)/(2*E‚Çñ)/km‚Åª¬π_to_eV

    p = plot(r, Œº_r, xaxis=:log, yaxis=:log, label = L"\mu(r)", framestyle = :box, xticks = [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 100, 1000, 10000, 100000, 1000000], grid = false,  dpi = 300)
    plot!(p, r, Œª_r, xaxis=:log, yaxis=:log, label = L"\lambda(r)", framestyle = :box, grid = false)
    plot!(p, r, repeat([œâ·µ¢_13], max), label = "H", fillrange = repeat([œâ‚Çñ_13], max), fillalpha = 0.35, c = 1, legend = :topright, xaxis=:log, yaxis=:log, framestyle = :box, grid = false)
    plot!(p, r, repeat([œâ·µ¢_12], max), label = "L", fillrange = repeat([œâ‚Çñ_12], max), fillalpha = 0.35, c = 4, legend = :topright, xaxis=:log, yaxis=:log, framestyle = :box, grid = false)
    xlabel!(p, "\$r \\, \\textrm{(km)}\$")
    ylabel!(p, "\$\\omega, \\mu, \\lambda \\, \\textrm{(km}^{-1}\\textrm{)}\$")
    xlims!(10, xmax)
    ylims!(0.00001, 1e5)
    display(p)
    savefig(name*".png")
    readline()
end


